import copy
"""
단순복사 vs 얕은복사(shallow copy) vs 깊은복사(deep copy)
"""
print("단순복사")
a = b = [1, 2, 3]
# 집합(set), 리스트, 딕셔너리 같이 값을 수정할수 있는(불변하지 않는) 자료형은 마찬가지.
print(a, b)
del a[0]
print(a, b)

"""단순복사:
동일한 주소를 가지는 객체를 복사함.
파이썬에서 모든 값은 자료형 객체이며, 변수는 객체를 참조하는 것이다.
그리고, = 은 객체를 변수로 접근(참조)하게 해준다. (할당)
그래서 변수1 = 변수2 같이하면, 변수1에서도 변수2가 가리키는 값을 똑같이 가리킬수 있는 것이다.
그렇기에 변수2가 가리키는 값을 수정하면, 수정한 객체가 변수2와 변수1 모두 같이 가리키는 값이기에, 변수1도 변한다.

(대신에 불변하는 값, immutable(숫자자료형, 불자료형, 튜플(읽기전용자료형), 문자열(수정불가능))은 예외,
값을 수정하면, 그 객체가 변할 수가 없기에(불변), 수정하려는 새로운 객체(값)을 할당하게 된다.) 
"""

print("\n얕은복사")
kiki = [1, 2, 3]
kuku = kiki.copy()
print(kiki, kuku)
del kiki[0]
print(kiki, kuku)

eo = [1, [2, 3, 4]]
ei = eo.copy()
print(eo, ei)
del eo[1][1]
print(eo, ei)
"""얕은복사:
수정가능한 자료형에서 메쏘드로 존재하는 .copy()메쏘드,
사실 얘의 역할은 얕은복사한 값을 반환한다.
얕은복사는 단순복사처럼 1개의 객체를 주는 것이 아니라, 1개의 객체를 복제해 2개로 만들어 넘겨준다.
대신에 표면적인(복합객체라고 합니다)객체 틀만 복사해서 주기에, 중첩리스트, 딕셔너리일 경우에 
표면적인 리스트 안에 있는 내부리스트(내부객체라고 합니다.)는 2개로 복제하지 않는다. (참조객체)
그래서 다차원에서 얕은복사를 하면, 내부객체들은 제대로 복사할 수 없다.
"""

print("\n깊은복사")
yeo = copy.deepcopy(eo)
print(eo, yeo)
del eo[1][0]
print(eo, yeo)
"""깊은복사:
copy 모듈의 .deepcopy()함수로 깊은복사한 값을 반환할 수 있다.
깊은복사는 얕은복사에서 1차적인 리스트들만 복사하는 수준에서 벗어나, 객체 전체를 복사해준다.
따라서 중첩리스트, 딕셔너리의 2차, 3차적인 내부객체도 모두 2개로 복제해서 넘겨준다. (참조하는 것따윈 없다)
"""

print("\niu(이유)")
huhu = [1]
huhu.append(huhu)
print(huhu)
print(huhu.copy())
print(copy.deepcopy(huhu))
