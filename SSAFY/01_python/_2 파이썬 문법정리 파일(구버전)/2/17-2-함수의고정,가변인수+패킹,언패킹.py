def func(a, b):     # 지금과 같은 함수에서 a, b 인수는 둘다 위치인수이면서 고정인수다.
    return a + b
# 매개변수 =  Parameter(파라미터) = 가인수(Dummy argument) = 형식매개변수
# 전달인자 =  Argument(아규먼트) = 실인수(인수) = 실매개변수


print(func(1, 2))
""" 함수 인수의 종류:
파이썬 함수에서 인수(매개변수)는 종류에 따라 여러가지가 있다.
위치의 중요성에 따라서 위치인수와, 키워드 인수가 있고,
인수의 개수에 따라서 고정인수와, 가변인수가 있다.

이게 다 무슨 소리인지 하나하나 알아보자.
"""

*a, b, c = [1, 2, 3, 4, 5, 6]
print(a, b, c)
""" 언패킹(unpacking):
패킹(packing)은 여러개의 값을 하나로 묶는 것이며,    (ex> byeonsu = 1, 2, 3, 4)
언패킹(unpacking)은 반대로 요소들을 여러 개로 나누는 것이다.     (ex> a, b, c, d = byeonsu)

언패킹으로 한묶음의 요소들을 여러개 변수들로 나눠 대입할 때, 요소들을 받아먹는 변수중 하나에 *을 앞에 붙이면,
다른 변수에 대입하고 남은 나머지 요소를 대입할 수 있다. 

함수를 호출할 때 활용할 수 있는데, 시퀀스 데이터(리스트, 튜플, 문자열) 앞에 *을 붙여 인수로 넘긴다면,
시퀀스 데이터의 각 요소가 언패킹 되서 함수의 매개변수에 각각 대입된다.

* 요약
대입받을때 *변수 형식으로 나머지 요소들을 대입받을 수 있다. (대입받는 개수 가변)
대입할때 *시퀀스데이터 형식으로 함수호출시 인수로 넘기면, 
각각의 매개변수들을 시퀀스데이터의 요소들로 각각 대입할 수 있다. 
"""


def ppap(n1: int, n2: int, n3: int):
    print(n1 + n2 + n3)


ppap(*[1, 2, 3])
ppap(*(4, 5, 6))
ppap(*"789")
# ppap(*[1, 2]) 또는 ppap(*[1, 2, 3, 4]) 같이
# 언패킹했을 때 요소 개수가 함수의 인수 개수와 맞지 않으면 오류가 난다.


def print_nums(*args):
    """
    :param args:
    여기서 매개변수 *arge 는 가변인수다. (*은 가변인수를 나타내는 기호)
    가변인수의 매개변수 이름은 관례적으로 ARGumentS(인수) 를 줄여서 args 로 사용함.
    이때 args 는 튜플임. (여러개 인자값으로 받아로 경우)
    """
    print("전달받은 인자값 : ", end='')
    for arg in args:
        print(arg, end=' ')
    print()


print_nums(1, 2, 3, 4)
print_nums(1, 2)
print_nums()
# 아래는 언패킹을 이용함
print_nums(*[1, 2, 3, 4])
print_nums(*('가', '나', '다'))
print_nums(*"ppap")
""" 고정 인수, 가변 인수(variable argument):
고정인수는 말그대로 인수가 고정되있으며, 함수에서 정의한 고정 인수의 개수만큼, 함수를 호출할 때 인수로 넘겨줘야한다.
(예외로 매개변수에 초깃값이 주어지면 굳이 개수를 맞춰서 인자값으로 넘겨줄 필요가 없다. 자세한건 17-4 참고)
흔히 함수의 매개변수를 선언할 때 이전까지 사용한 방법으로, 인수의 개수는 고정되어 있는 것이 특징이다.


반대로 가변인수는 같은 함수에서 넣을 수 있는 개수가 정해지지 않은 인수다.
따라서 인수 열개든 한개든, 심지어 인수를 넣지 않아도 된다. (말그대로 인수의 개수가 가변한다)

이러한 가변인수는 언패킹을 활용하는데, 함수 안에서 매개변수 앞에 *을 붙여서 만든다. 
(언패킹할 때 받아먹는 변수중 하나에 *을 붙이는 그거 맞다. 
함수를 호출할 때 전달받은 인자중 다른 매개변수에 대입되지 못하고 남은 나머지를 튜플로 묶어 대입받는다.)
경우에 따라서 여러개의 인수를 받아오기에, 가변인수는 튜플 자료형이다.

고정인수와 가변인수를 같이 사용할 수도 있다. 
(대신에 가변인수는 매개변수에 대입되지 않은 나머지를 모아 대입받기에, 고정인수 앞에 있으면 에러가 난다.)
"""


def together(to, *args2):
    print('고정인수 :', to)
    print('가변인수 :', args2)


together(1, 2, 3, 4, 5, 6, 7)
together(*"가나다라마바사")

# https://python.bakyeono.net/chapter-5-5.html 간만에 대단한 사이트.