# -*- coding: utf-8 -*-
# 정리하는데 2일 잡아먹었다... 생고생 제대로 하니까 허탈하다.
formating = '포맷팅'
print("%% operator %s" % formating)		        # 포맷팅 방법 1 (%% operator)
print("str.format {f}".format(f=formating))     # 포맷팅 방법 2 (str.format)
print(f"f-string {formating}")			        # 포맷팅 방법 3 (f-string)
"""문자열 포맷팅:
문자열내에서 값을 삽입하는 것을 포맷팅이라고 한다.
c언어 를 보자면, printf()함수에서 형식문자(%~)로 문자열에 없는 값을 삽입할 수 있듯이 파이썬에서도 문자열에 다른 값을 삽입할 수 있다.
(물론 +(문자열 결합)을 사용해서 간단한 건 쉽게 할 수 있지만, 반복되고 복잡한 결합등에는 포맷팅이 유리하다)
이 포맷팅에도 버전에 따른 방식의 종류가 있다. 
3.0 이전 방식의 % operator, 3.0 이후 방식의 str.format, 3.6 이상 방식의 f-string 이다.
차례대로 써먹어보자
(참고로 % 방식에서는 %를 출력할때 %%로 써줘야되고, {} 방식에서는 출력할때 {를 {{, }를 }}로 써줘야 겹치지 않고 출력된다.)
"""

test1 = '\n%s 버전' % '% operator'
print(test1)
time = '%s %d. %d. %d.' % ('현재시간 :', 2020, 1, 26)
print(time)
'''% operator:
오래된 포맷팅 방식으로 C언어 의 printf()함수에서 쓴 방식과 비슷한데, 앞쪽 문자열에 %~로 데이터 타입에 맞는 형식문자를 써주고,
문자열 뒤에 % 를 붙인 후, 형식문자에 들어갈 값이나 변수를 달아주는 방식이다. 
타입에 맞게 형식문자를 쓰지않으면 에러나고, 문자열이 길어지면 가독성이 떨어지는 단점이 있다.
ex>  print("나는 %s이고, %d살 이며, %s에서 산다. 내 꿈은 %s이며, %d까지 %s하는 것이 목표다. % (name, age, location, dream, time, todo)
'''

test2 = '\n{} 버전'.format('str.format')
print(test2)
print('나는 {1}, {0}'.format('아무생각이 없기 때문이다.', '아무생각이 없다.'))
test3 = '이름, {name}: {age}, {location}출신'
print(test3.format(name='누구누구', age='18살', location='대전'))

dic = {'name': '아몰랑', 'age': '17살', 'location': '세종'}
print(test3.format(**dic))
'''str.format:
3.0부터의 새로운 포맷팅 방식으로, 예전 보단 이 포맷팅 방식을 공식문서에서도 권장한다. 
.format() 함수를 문자열 뒤에 붙여 포맷팅 해주는 방식으로, 앞의 문자열에는 {}로 문자열이 들어갈 공간을 만든다.

들어갈 값이 여러개면 0, 1, 2와 같이 format()함수에 들어가는 매개변수의 순서대로 인덱스 번호를 {}안에 사용해 값을 넣을 수도 있고, 
값에대한 키 값을 딕셔너리 구조처럼(나중에 배운다) 짝을 맞추어 키값을 {}안에 사용해 값을 넣을 수도 있다.
그리고 따로 format()함수에 들어갈 키와 값의 쌍들을 딕셔너리 자료형 변수로 만든다음 인자로 넣어줘도 된다. 
대신 인자앞에 **를 붙여야 된다. (이부분에 대해서는 2폴터 17-3, 딕셔너리언패킹을 참고)

예전 방식보다 보기 좋아졌어도 이역시 길어지면 가독성이 떨어진다. 그러나 새로운 방식이 등장했으니...
'''

new = 'f-string'
print(f"\n{new} 버전")
zom = '좀'
test4 = f'제발 {zom} 코딩 할때 {zom} 이상한 에러뜨지마라 {zom}'
print(test4)
num = 1
print(f"이것도 된다. {num}, {num + num}, {num + 2}")
li1 = ['나는', '너는']
dic2 = {"me": '행복하다.', 'you': '행복하니?'}
print(f"{li1[0]} {dic2['me']} {li1[1]} {dic2['you']}")
'''f-string:
3.6이상 버전에서 사용할 수 있는 포맷팅 방식, 문자열의 {}안에 대입할 변수를 넣어주면 된다. .format() 함수도 필요없다. 대신 문자열 맨 앞에 f를 붙여줘야 된다.
이방식으로 숫자 자료형 변수의 산술연산 출력도 가능하다. 변수이름을 {}안에 적어주면 되는데, 물론 리스트나 딕셔너리도 들어갈 수 있다.

방식의 순서를 따지면, f-string > % operator > str.format 순으로 빠르다. 
참고로 이게 다가 아니라, 포맷팅될때 표현되는 방식을 세세하게 지정해 줄수 있는데...
(3-5,형식지정자 참고)
'''
