# -*- coding: utf-8 -*-
print("{0:ㅡ^+10,}".format(9999.9))
"""형식 지정자:
문자열 내에 값을 삽입(포맷팅)할 때, 세부적으로 붙여줄 설정을 형식 지정자로 해줄 수 있다.
%을 사용한 예전 포맷팅 방법에는 %(타입)뒤에 %형식지정자(타입), {}를 사용하는 요즘 포맷팅 방법에는 {(값)}에서 {(값): 형식지정자}로 하면 된다.
형식 지정자로 적용시킬 수있는 설정을 모두 쓰면 아래와 같다.
<<채움문자> 정렬방법> <부호표시법> <전체폭설정> <단위구분법> <소수점이하자릿수> <타입형식>
"""

print("정렬기본값 : [{0:10}]\n왼  쪽정렬 : [{0:<10}]\n가운데정렬 : [{0:^10}]\n오른쪽정렬 : [{0:>10}]".format('ppap'))
print("정렬기본값 : [{0:10}]\n왼  쪽정렬 : [{0:<10}]\n가운데정렬 : [{0:^10}]\n오른쪽정렬 : [{0:>10}]".format(1234))
print("채움문자(숫자) : [{0:0^10}]\n채움문자(문자) : [{0:빔^10}]\n채움문자(특수기호) : [{0:_^10}]\n채움문자(특수기호) : [{0:□^10}]".format(2020))
'''정렬방법, 전체폭설정, 채움문자:
정렬하는 방법에는 왼쪽(<), 가운데(^), 오른쪽(>) 정렬이 있다. (기본값: 문자는 왼쪽 정렬(<), 숫자는 오른쪽 정렬(>))
물론 원래는 공백이 생기지 않는데, 여기서는 추가로 전체 폭설정을(10) 추가해서 정렬될 때 공백이 보이게 했다.

전체 폭설정은 원하는 폭만큼의 숫자를 넣어주면 원래 값의 크기가 뭐든간에 폭만큼(남는 크기는 공백으로) 값이 저장된다. 
채움문자는 정렬방법 앞에 원하는 문자나 숫자를 추가한다면 공백을 채우는 문자를 설정해줄 수 있다. (정렬방법 명시 없이도(기본값으로 정렬) 사용가능)
'''

print("부호표시기본값: {0:}, {1:}\n모든부호표시: {0:+}, {1:+}\n-부호만표시: {0:-}, {1:-}\n부호맨앞위치: {0:=+5}, {1:=5}".format(3, -3))
'''부호표시법:
부호를 표시하는 방법에는 모든부호표시(+), 음수부호만표시(-), 부호 맨앞 고정표시(=)가 있다. (기본값: 음수부호만표시(-))
부호를 맨앞에 고정 표시하면서 모든부호를 표시하려면 =+ 순서로 써야한다. (+=로 쓰면 +을 공백 채움문자로 인식)
당연하겠지만 문자에 부호표시법을 쓰면 에러가 난다.
'''

print("기본값: {0:}\n,붙임: {0:,}\n_붙임: {0:_}".format(1980000))
'''단위구분법:
단위구분법에는 천단위(000)마다, 콤마 붙이기(,), 밑줄 붙이기(_)가 있다. (기본값 : 안붙임)
주위에서 화폐 액수나 그외 자릿수가 많아지는 숫자들을 보기좋게 출력시킬수 있다.
'''

print("기본값(10자리수): {0:}\n5자리수전까지: {0:.5}\n1자리수전까지: {0:.1}\n20자리수전까지: {0:.20}".format(3.1415926535))
'''소수점이하자릿수:
소수점이하자릿수는 .(자릿수) 처럼 작성하면 쓴 자릿수부터 뒤까지를 짜른다. (기본값: 값 그대로, 짜르는 자릿수 없음) 
당연히 자릿수에는 자연수만 들어갈 수 있다. (0도 들어가긴 하는데 1과 출력값이 같다)
자릿수에서 원래의 소수점 아래 자릿수보다 더 큰 값을 작성하면 원래값 뒤에 0이 나오고, 더 간다면 이상한 값이 나오는걸 볼 수 있는데...
파이썬의 실수의 범위를 벗어나서 오차범위로 나오는 값들이다. 웬만하면 거기까진 가진 말자.
'''

print("기본값: {0:}\n2진수: {0:b}\n10진수: {0:d}\n16진수소문자: {0:x}\n16진수대문자: {0:X}".format(63))
'''타입형식:
타입형식은 문자열이면 s, 정수면 b, d, o, x, X, n, 실수면 e, E, f, F, g, G, n 과 같이 있는데
이것으로 2진법(b), 10진법(d), 16진법의 소문자와 대문자(x, X)를 출력할 수 있다.
'''