import re
# 컴퓨터과학의 농담중에 문제 하나를 정규표현식으로 풀게되면 문제가 2개가 된다. 라는 말이있다.
gusik = """ 
정규표현식(regular expression) :
정규표현식은 일정한 규칙을 가진 문자열을 표현하는 방법으로, 그러한 문자열을 식별할 때 사용함.
문자열 규칙의 집합이 복잡해지면, 외계어?가 되며, 문자열을 다룰때 매우 유용하지만 읽고 해석하기에는 매우 난해하긴함.

하지만 정규표현식도 여러개로 나열한 규칙들의 모임이라, 하나하나 쪼개보면 어렵지 않음.
"""
# 패턴으로 문자열 식별 함수(match, search, compile)

print(re.match('hi', 'hi five!'))
print(re.search('hi', 'five hi!'))
"""
정규표현식으로 문자열을 식별할 때는 re 모듈의 match() 함수를 사용한다. 

match('패턴', '문자열')
로 둘째 인자값인 문자열이 첫째 인자값, 패턴(정규표현식)에 매칭되는지(문자열이 패턴을 따르는지) 판별(식별)하며,
패턴과 매칭이 되면 매치(re.Match) 객체가 반환되고, 매칭이 되지 않으면 아무것도 반환되지 않는다.
match()함수는 문자열의 시작부터 패턴에 매칭하는지 판단하는데,

search()함수로는 문자열의 일부분이 패턴에 매칭하는지만 판단하며, 형식과 반환방법은 match()함수와 같다.
(search()함수도 매칭될 때 매치(re.Match) 객체를 반환한다.
"""
rule = re.compile('wow')
print(rule.match('wowow'))
print(rule.search('wow!!'))
"""
re 모듈의 compile('패턴') 으로, 정규표현식 패턴을 객체로 반환할 수 있으며,
이 객체를,

객체.match('문자열')
객체.search('문자열')
메서드로 호출해서 패턴과 매칭이 되는지 위의 match(), search() 함수와 동일하게 판별할 수 있다.
"""

# 정규표현식 그룹 함수(group, groups)
m = re.match('([0-9]+) ([0-9]+)', '10 295')
print(m.group(1))    # 첫 번째 그룹(그룹 1)에 매칭된 문자열을 반환
print(m.group(2))    # 두 번째 그룹(그룹 2)에 매칭된 문자열을 반환
print(m.group())     # 매칭된 문자열을 한꺼번에 반환
print(m.group(0))    # 위와 같음
"""
정규 표현식 패턴에서 ()으로 그룹을 만들었는데, 
이 패턴의 그룹에 매칭된 문자열만 그룹별로 반환할 수 있음. 

매치객체.group() 
와 같은 형식으로, 인자값에 숫자(1~)를 넣으면 왼쪽 순으로 원하는 순서의 그룹에 매칭된 문자열을 반환
인자값에 0을 넣거나 인자값을 비워두면 매칭된 문자열을 한꺼번에 반환

매치객체.groups()
형식으로, 그룹에 해당하는 문자열 모두를 튜플로 한번에 싹다 묶어서 반환할 수도 있음.
"""
print(m.groups())

# 그룹에 이름 지정
m = re.match('(?P<func>[a-zA-Z_][a-zA-Z0-9_]+)\((?P<arg>\w+)\)', 'print(1234)')
print(m.group('func'))
print(m.group('arg'))
"""
그룹을 왼쪽 순서대로 숫자로 구분하는 법 말고도, 그룹에 이름을 짓는 방법도 있음.
(정규표현식) -> (?P<그룹이름> 정규표현식)
같이 괄호안 맨앞에 ?P<그룹이름> 을 추가하면 그 그룹의 이름을 지정할 수 있고,

매치객체.group('그룹이름')
과 같이해서 그룹의 이름을 가지고, 그 그룹과 매칭되는 문자열을 반환할 수 있음.
"""

# 패턴에 매칭되는 모든 문자열을 리스트로 반환 함수(findall)
print(re.findall('[0-9]+', 'a1 b2 c3 d4 555'))
"""
re 모듈의 findall() 함수로,
findall('패턴', '문자열')

과 같이 해서, 패턴과 매칭되는 문자열 모두를 리스트로 한번에 싹다 묶어서 반환할 수 있음.
"""

# 정규표현식으로 찾은 문자열들을 바꾸는 함수(sub)
print(re.sub('I', 'You', 'I can do it! I can!'))
"""
정규표현식으로 찾은 문자열들을 다른 문자열로 바꿀수도 있는데,
re 모듈의 sub() 함수로,

sub('패턴', '변환된 후 문자열', '전체 문자열')
으로 문자열에서 패턴에 만족하는 모든 문자열들을 '변환된 후 문자열'로 변환해서 반환할 수 있다.
(전체 문자열에서 정규표현식 패턴에 만족하는 요소들만 원하는 값으로 변환하는 것이다.)

sub('패턴', '변환된 후 문자열', '전체 문자열', 바꿀횟수)
로 마지막 인자값으로 숫자를 추가해서 전체 문자열이 아닌, 일정 횟수의 문자열만 변환 할 수도 있다.

sub('패턴', 함수, '전체 문자열')
로 해서 변환할 문자열들을 함수에서 처리할 수 있다. 
(이때의 함수에서는 매개변수로 매치객체를 전달받아서 변환된 문자열을 반환한다.)
"""

# 그룹으로 묶어서 변환하는 함수(sub)
print(re.sub('([0-9]+) ([a-z]+)', '\\2! \\2!! \\2!!! -> \\1', '1234 ppap'))
print(re.sub('({\s*)"(?P<key>\w+)":\s*"(?P<value>\w+)"(\s*})', '<\\g<key>>\\g<value></\\g<key>>', '{ "b": "텍스트" }'))
"""
sub 로 문자열을 바꿀때, 패턴(정규표현신) 인자값에 그룹을 묶어서 패턴을 지정한다면,
그룹의 순서를 원하는 대로 배치할 수 있다.

sub('패턴', '변환후 전체 문자열', '전체 문자열')
로 해서 전체 문자열(3번째 인자값)을 변환후 전체 문자열(2번째 인자값) 형태로 반환할 수 있는데,

이때 그룹에 매칭되는 문자열을 
그룹의 순서를 이용해 

\\숫자
로, 매칭된 문자열을 변환후 전체 문자열 안에 위치시키거나,

\\g<이름>
\\g<숫자>
그룹에 이름이 주어졌었다면, 그룹의 이름을 가지고 그 그룹과 매칭되는 문자열을 위 형식으로 불러서 위치시킬수 있다. 
"""
# raw 문자열(문자열 앞에 r을 붙이는 것)을 사용하면 \\할 필요없이 \만 사용해도 된다.
