def yield_together():
    yield from [1, 2, 3]


for i in yield_together():
    print(i)
""" yield from:
여러개의 값을 yield 로 전달할 때, 파이썬 3.3 이상부터는 yield from 을 사용해서,

yield from 반복가능한 객체
yield from 이터레이터(제너레이터 객체)
등으로 여러개의 요소들을 한개 씩 함수 바깥으로 전달 할 수 있다.

특히 제너레이터 객체를 yield 의 값으로 반환할 수 있기에, 다른 제너레이터 함수를 호출한 값(반환시 객체가 반환)을
yield 의 값으로 사용할 수 있다.
"""

print((i for i in range(50) if i % 5 == 0))
""" 제너레이터 표현식:
리스트 내포, 표현식을 배우면서 튜플, 딕셔너리, 집합, range() 의 표현식도 배웠었는데, (폴더2 6-2 참고)
그때 얼핏 나왔던 것이 제너레이터 표현식이다. ()로 감싸서 사용하기에, 이와 형식이 겹치는 튜플(tuple)은 tuple()로 감싸야 됬었다.

표현식의 문법은 리스트 내포 확장에서 처럼 표현식 문법 그대로 사용할 수 있다.
이 제너레이터 표현식을 활용해서 제너레이터를 좀 더 쉽게 사용할 수 있다.
"""
