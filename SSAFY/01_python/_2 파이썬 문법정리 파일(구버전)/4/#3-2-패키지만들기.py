summary = """ 
패키지 만들기:
패키지는 모듈로 구성되어 있는 구조이기에, 패키지를 만들 때 
패키지 이름을 폴더로, 폴더안에 모듈들을 .py 파일로 만들면 된다.
(파이썬 3.3 이전에서는 패키지 폴더 안에 __init__.py 파일이 있어야 폴더를 패키지로 인식한다. 
파이썬 3.3 이상부터는 __init__.py 파일이 폴더에 없어도 인식하지만, 
하위버전에도 호환될 수 있게 __init__.py 파일을 작성하는 것이 권장된다.) (__init__.py 는 기본적으로 비워둘 수 있다.)

ex>
패키지이름
    - __init__.py
    - 모듈이름.py
    - 모듈2이름.py
    - 모듈3이름.py
    ......
    
이런 패키지를 가져오는 메인스크립트는 

import 패키지.모듈
등과 같이 가져오면 된다. (추가로는 #2-2. 패키지 가져오기 참고)

참고로 패키지의 모듈은 일반 모듈과 다르게 
__name__ 변수에서 '모듈이름' 이 저장되지 않고, '패키지이름.모듈이름' 이 저장된다.
"""
# 아래는 패키지 from import 응용
"""
패키지 안의 모듈에서 다른 모듈을 참조할 때,

from . import 모듈
로 같은 패키지의 다른 모듈을 가져올 수 있다.
이때 .(점)은 현재 패키지 라는 뜻이다.

이 .을 활용해서

from .모듈 import 변수(, 함수, 클래스)
로 같은 패키지의 모듈에 있는 변수(, 함수, 클래스)를 가져올 수 있다.

from .모듈 import *
과 같다면 모듈의 모든 객체(변수, 함수, 클래스)를 가져올 수 있다.


이것으로 모듈에서 다른 모듈의 객체를 활용할 때 사용할 수도 있지만, 
메인 스크립트에서 패키지의 모든 변수, 함수, 클래스를 가져오게 할 수도 있다.

바로 패키지의 __init__.py 파일에서 
원하는 모듈들의 변수, 함수, 클래스를 가져오게 하면, (ex> from .모듈 import 변수,함수,클래스 또는 from .모듈 import *)

나중에 패키지를 가져올 때, 모듈을 거치지 않고 그 모듈의 변수, 함수, 클래스를 이용할 수 있게 된다.

패키지.변수
패키지.함수()
패키지.클래스()
와 같이 모듈을 따로 거치지 않고 패키지로 패키지의 모듈 변수, 함수, 클래스를 접근할 수 있는 것이다.
"""
