""" 
우리는 __metaclass__ 속성을 이용해서 클래스를 원하는 메타클래스로 생성할 수 있다.
파이썬은 클래스를 생성할 때 __metaclass__가 있는지 먼저 확인하고, 발견된 경우에 해당 메타클래스를 사용하고, 발견되지 않은 경우 type을 사용하게된다.

만약, 아래 클래스를 생성하기 위해 파이썬은 다음과 같이 작동한다.
class Foo(Bar):
    pass


Foo에 __metaclass__ 속성이 있나요?
있다면, __metaclass__ 속성에 있는 걸로 Foo 클래스 객체를 만든다.
없다면, 파이썬이 모듈 레벨에서 __metaclass__를 찾는다. 그래도 찾지 못했다면 파이썬이 가장 첫번째 부모 클래스(Bar)의 메타클래스(일반적으로 type)를 사용해
클래스 객체를 만든다. 클래스를 만드는 무언가인 메타클래스의 주 목적은 클래스를 만들 때 클래스를 자동으로 조정하기 위한 것이다.(보통 현재 컨텍스트와 알맞은 클래스를 만들기 위해 
API에서 메타클래스를 커스텀해서 사용한다고 합니다.) 메타클래스를 만들기위해서 특별한 형식이 있는 것이 아니라 그저 호출할 수 있는 형태(callable)이면 된다.
보통 메타클래스는 type에 전달하는 객체와 같은 객체를 받는다. 그렇다면 인스턴스를 하나만 만들 수 있는 클래스(Singleton)를 만드는 메타 클래스 예제를 보자
"""
#
class Singleton(type):    # type을 상속받음
    __instances = {}      # 클래스의 인스턴스를 저장할 속성
    def __call__(cls, *args, **kwargs):    # 클래스로 인스턴스를 만들 때 호출되는 메서드
        if cls not in cls.__instances:     # 클래스로 인스턴스를 생성하지 않았는지 확인
            cls.__instances[cls] = super().__call__(*args, **kwargs) # 생성하지 않았으면 인스턴스를 생성하여 속성에 저장
        return cls.__instances[cls]        # 클래스로 인스턴스를 생성했으면 인스턴스 반환
 
class Hello(metaclass=Singleton):    # 메타클래스로 Singleton을 지정
    pass
 
a = Hello()     # 클래스 Hello로 인스턴스 a 생성
b = Hello()     # 클래스 Hello로 인스턴스 b 생성
print(a is b)   # True: 인스턴스 a와 b는 같음

""" 
정리하자면 클래스가 인스턴스를 생성하는 객체라는 것을 알게 되었다. 클래스는 객체이므로 type()을 이용해 생성할 수 있다. 
즉, 클래스는 메타클래스의 인스턴스다. 파이썬에서는 type을 제외한 모든 것이 객체이고 모든 객체는 클래스의 인스턴스거나 메타클래스의 인스턴스다.
(type이 객체라면 type 인스턴스를 생성하는 무언가가 있어야하므로 말이 되지 않는다.)
"""