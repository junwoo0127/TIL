def func1():
    word = "외부 함수"
    print(word)

    def func2():
        print(word, "가 호출한 내부 함수", sep='')
    func2()


func1()
""" 함수에서 함수 정의(함수 중첩):
함수안에서 함수도 만들수 있으며, 이때 외부함수에서 만든 지역함수는 내부함수에서도 사용할 수 있다.
외부함수의 지역 범위는 외부함수의 시작부터 끝이며, 외부함수에서 정의하고 호출한 내부함수도 범위 내에 속한다.
(간단히, 함수의 지역변수는, 그안에서 정의한 모든 함수에서 접근할 수 있음)
"""


def func1():
    x = 1

    def func2():
        x = 10
        print(x)
    func2()
    print(x)


func1()
"""
내부함수에서 외부함수 지역변수의 값을 수정할 수 없음, 시도하면 외부함수 지역변수와는 이름만 같은 내부함수의 지역변수를 만듬.
(함수에서 변수를 선언하면 현재 함수의 지역변수가 됨)

그래서 내부함수에서 외부함수의 지역변수를 수정하려면, nonlocal 키워드를 사용해야 함.
nonlocal 지역변수
에서 nonlocal 의 의미는 오른쪽에 적힌 지역변수가 현재 함수의 지역변수가 아니라는 것을 의미함.
"""


def A():
    """x, y 모두 A의 지역변수로 선언 됬다."""
    x = 10
    y = 100

    def B():
        """x 가 B의 지역변수로 선언됬다."""
        x = 20

        def C():
            nonlocal x
            # 이때 x는 A함수, B함수 에서 같은 지역변수가 있지만, 가까운 함수우선으로, B 함수의 지역변수를 불러온다.
            nonlocal y
            # y는 A함수 에서는 같은 이름의 지역변수가 없고, A함수 에만 있기에 A함수의 지역변수를 불러온다.
            print(x, y)

        C()

    B()


A()
"""
nonlocal 은 현재함수 바깥에 있는 지역변수를 찾을 때 가장 가까운 함수 우선으로 불러옴.

참고로 함수가 여러단계 중첩되도, global 키워드는 항상 전역변수를 사용함. (지역변수는 모두 무시)
 
** 전역변수를 global 로 접근하는 대신 함수의 매개변수, 반환값을 이용하는 것이 좋음(권장함)
** 나중에 코드가 복잡해질때 global 이 있으면, 변수 값이 어디서 바뀌는지 알기 어려워짐.
"""