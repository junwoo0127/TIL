"""
map() 함수는 iterable(반복가능한 객체, ex> list, dict, ... )의 데이터들을 
하나 하나의 데이터로 쪼개서 그 데이터를 전달받은 방법으로 변환해서 다시 데이터들로 반환하는 함수다.
ex)"""
list_a = [1, 2, 3]
a, b, c = map(str, list_a)
print(a, "의 타입:", type(a), b, "의 타입:", type(b), c, "의 타입:", type(c))

"""(map 동작 구조)

데이터들(인자)      1  ->(처리)->  '1'        데이터들(반환)
  [1, 2, 3]  ->   2  ->(처리)->  '2'   ->  ['1'. '2', '3']
                  3  ->(처리)->  '3'                

형식은 map(변환할 형식, 변환할 값들) 과 같으며
변환할 형식은 함수, 자료형 같은 인자가 들어갈 수 있고, 
ex)"""
def func(x):
    return x * 2


print(list(map(func, [1, 2, 3])))
# ->  [2, 4, 6] 변환에 함수를 사용
"""
변환할 값은 리스트나 dict 같은 인자가 들어갈 수 있다.
ex)"""
x = {1: 10, 2: 20, 3: 30}
print(list(map(str, x)))
# ->  ['1', '2', '3'] dict 의 key 값을 사용
print(list(map(str, [x[i] for i in x])))
# ->  ['10', '20', '30'] dict 의 value 값을 사용


"""
map()함수에 변환할 객체를 여러개 사용할 수도 있다.
람다표현식이랑 주로 합해서 사용하는데(3>4 람다표현식응용 참고) 변환할 객체가 제한이 없다.
"""
a = [1, 2, 3, 4]
b = [4, 3, 2, 1]
print(list(map(lambda a1, a2: a1+a2, a, b)))
c = [10, 20, 30, 40]
d = reversed(c)
print(list(map(lambda b1, b2, b3, b4: b1+b2+b3+b4, a, b, c, d)))
