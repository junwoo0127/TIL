def count_length(word: str, num: int) -> int:
    return len(word) * num
# 함수 타입 힌팅(Type hinting)
# def 함수이름 (파라미터이름 : 파라미터타입) -> 반환타입:


print(count_length("CHANIK", 5))
print(count_length([1, 2], 3))
""" 함수 타입 힌팅(Type hinting):
python 3.5 버전에서는 코드 가독성에 도움을 주는, 파라미터, 아규먼트에 대한 타입 힌트가 도입됨.
python 3.6 버전에서는 함수의 변수에서도 타입 힌트를 표시할 수 있음.
이것을 타입 힌트(Type hint), 그리고 힌트를 표시하는 것을 타입 힌팅(Type hinting)이라함.

이게 생긴 이유는 타입(자료형) 표시하는 표준적인 구문을 던져줘서 
정적 분석을 쉽게하고, 리펙토링(소프트웨어를 이해하기 쉽게, 디자인을 개선시키는 기법)에도 도움을 줌.
(그렇다고 파이썬이 정적 타입을 지향하는 것은 아님.)

근데 타입 힌트는 말그대로 힌트기능이다. (런타임에 영향을 주지 않는다)
다르게 말하면 코드에 붙은 주석 기능으로, 타입 힌트와 다른 타입(자료형)을 사용해도 코드가 에러나지는 않는다. 
(대신 개발환경에서 (파이참에선 노란색 바탕으로) 표시된다,)


함수의 독스트링을 __doc__로 가져왔듯이, 타입 힌트도 __annotations__로 가져올 수 있다.
"""
print(count_length.__annotations__)
"""
함수의 매개변수에 타입 힌트를 붙일 때는, 함수의 정의 부분에서 괄호안에

함수이름(매개변수: 타입, 매개변수: 타입...):
와 같이 하며, 

함수의 반환값에 타입 힌트를 붙일 때는, 함수의 정의 부분에서 콜론 바로 뒤에

함수이름(매개변수...) -> 타입
과같이 한다. 

변수에 타입 힌트를 붙일 때도, 매개변수와 같이,

변수: 타입 = 값
과 같이 하면 된다. 
그외에도 클래스 맴버 변수(변수와 같은 방법)나, 클래스 메쏘드의 매개변수(함수 매개변수와 같은 방법)에서도 타입 힌트를 적용 할 수 있다.
"""

"""typing 모듈
typing 모듈을 사용해서 좀더 다양한 타입 기능을 이용할 수 있다.

타입중에서 키워드를 쓰는 것도 가능하다. Any(아무 타입) NoReturn(반환값에서 쓰는데, 리턴이 안될때)
그외에도 타입을 별명으로 만들어서 사용하거나, 블로그에 찾으니까 넘쳐나는 정보가 있었다. (정리할 훗날을 기약하자)

참고 :
https://lewisxyz000.tistory.com/35
"""