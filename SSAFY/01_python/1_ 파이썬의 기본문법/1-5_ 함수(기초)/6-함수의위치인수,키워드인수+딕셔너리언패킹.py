def func(a, b, c):
    print(a, b, c)


func(1, 2, 3)      # 위치인수로 함수 호출
func(a=3, b=2, c=1)    # 키워드 인수로 함수 호출
func(1, c=2, b=3)       # 인수를 짬뽕(위치인수 + 키워드 인수)해도 가능
""" 위치인수(positional argument), 키워드 인수(keyword parameter)
위치 인수는 함수를 호출할 때 받은 인수의 순서대로, 매개변수에 대입하는 것을 말함.
함수를 배우면서 지금까지 대부분 이 방법을 사용했으며,  
인수의 순서가 중요하며, 순서가 바뀌면, 변수에 값이 뒤바껴 들어갈 수 있기에 조심해야함.

대신에 키워드 인수는 인수의 위치(순서)에 신경 쓸 필요 없음.
말그대로 키워드 인수는 인수에 키워드(이름)을 붙이는 기능으로, 함수를 호출할 때도 매개변수=인자값 형식으로 사용.
함수를 정의할 때는 따로 건들 필요 없음.
(위치인수와 키워드 인수는 짬뽕해서 사용가능하다.)
"""
dic = {'a': '에이', 'b': '비', 'c': '씨'}
func(*dic)
func(**dic)
""" 딕셔너리 언패킹:
지난번 시퀀스데이터에 *를 앞에 붙여 시퀀스데이터의 요소들을 언패킹 했었는데, 딕셔너리 자료형도 가능하다.
*딕셔너리 와 같이하면, 키들만 언패킹한다. 
그래서 딕셔너리는 *를 추가로 더 붙여서 **딕셔너리와 같이 해야 키:값 쌍들을 언패킹 할 수 있다. (이렇게 하면 가변+키워드 인수가 된다.)

함수의 정의에서 가변 키워드 인수(딕셔너리 인자들을)를 받아온다면, 언패킹을 활용하면 된다. **매개변수와 같이 한다.

매개변수 이름도 자유지만 관례적으로 KeyWord ARGumentS 를 줄여서 kwargs 를 사용한다.
kwargs 는 딕셔너리 자료형으로 for문에서 반복 할 수 있다. (.items()함수 없으면 에러)


또한 마찬가지로 고정위치인수와 가변키워드인수를 함께 사용해도 되고,
가변위치인수와 가변키워드인수를 함께 사용해도 된다.
"""


def intro(name, **kwargs):
    """
    :param name: 위치 고정 인수
    :param kwargs: 키워드 가변 인수
    """
    print('<인적사항> \n이름:', name)
    for key, value in kwargs.items():
        print(key, ":", value)


intro("김동")
intro("김동", **{'사는곳': '참나의직관속', '진짜사는곳': '대전'})


def prt(*args, **kwargs):
    """
    :param args: 위치 가변 인수
    :param kwargs: 키워드 가변 인수
    """